I want to create a game that generates a random IPv4 address and challenges the player to identify its properties. The game should function as follows:

Random IPv4 Generation: Generate a random IPv4 address (e.g., 192.168.1.100) and display it on the screen.
Subnet Mask Selection: After displaying the IPv4 address, start a counter that rapidly increments from 1 to 32 (representing possible subnet mask values, e.g., /1 to /32) at a fast but visible pace (e.g., 100ms per increment). When the player presses the "Enter" key, the current number is selected as the subnet mask (e.g., /24), forming a CIDR notation (e.g., 192.168.1.100/24).
Special Address Handling:
If the generated IPv4 address falls within a reserved, multicast, or experimental range, the game should detect this immediately after the subnet mask is selected.
Reserved Ranges: Include private (e.g., 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255), loopback (127.0.0.0–127.255.255.255), link-local (169.254.0.0–169.254.255.255), and other IANA-reserved ranges (e.g., 0.0.0.0–0.255.255.255, 240.0.0.0–255.255.255.254).
Multicast Range: 224.0.0.0–239.255.255.255.
Experimental Range: 240.0.0.0–255.255.255.254 (excluding 255.255.255.255).
If the address is reserved, multicast, or experimental, display a detailed message specifying the range and its purpose (e.g., "This is a private address in the 192.168.0.0/16 range, used for local networks."). Instead of pressing "Enter" to select a subnet mask, the player must press:
'r' for reserved addresses.
'm' for multicast addresses.
'e' for experimental addresses.
If the player presses the wrong key or "Enter" for these special addresses, they lose one heart.
Form Submission for Non-Special Addresses:
If the address is not reserved, multicast, or experimental, prompt the player to fill out a form calculating the following for the given IPv4 address and subnet mask:
Network Address: The first address in the subnet.
Broadcast Address: The last address in the subnet.
First Usable Address: The first host address (network address + 1).
Last Usable Address: The last host address (broadcast address - 1).
The player must input these addresses in dotted-decimal notation (e.g., 192.168.1.0).
Validate the inputs. If any answer is incorrect, the player loses one heart.
Game Mechanics:
The player starts with 5 hearts (lives) and has 2 minutes per round to complete the task (from IPv4 display to form submission or special address identification).
If the player selects an incorrect subnet mask for a non-special address, presses the wrong key for a special address, or submits incorrect form answers, they lose one heart.
If the time runs out, the player loses one heart, and the round ends.
If the player loses all 5 hearts, the game ends with a "Game Over" message displaying the number of rounds completed.
After each successful round (correct form submission or special address identification), increment the round counter and start a new round with a new random IPv4 address.
Display the current number of hearts, time remaining, and round number on the screen at all times.
Technical Requirements:
Use HTML and JavaScript for implementation to ensure the game runs in a web browser.
Ensure accurate IPv4 address and subnet calculations using bitwise operations or a reliable IP address library.
Provide a simple, intuitive user interface with clear instructions (e.g., "Press Enter to select subnet mask" or "Press 'r', 'm', or 'e' for special addresses").
Use a timer to enforce the 2-minute limit per round.
Ensure random IPv4 generation includes all possible addresses (0.0.0.0–255.255.255.255) but correctly identifies special ranges.
Store and display a high score (e.g., most rounds completed) using local storage.
Optional Enhancements:
Add sound effects for key presses, correct/incorrect answers, and round completion.
Include a visual countdown timer (e.g., a progress bar) for the 2-minute limit.
Provide hints (e.g., subnet mask range or special address type) at the cost of one heart.                                 example of the game: https://rosebud.ai/p/0b3bb449-ebcf-49a3-bcbc-4f8a56bfcab1